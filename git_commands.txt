Repo to local machine

1. git clone <url>
	* copies the repository to local computer
	
2. git remote -v
	* cloning automatically adds remotes' 
	* remotes are references to repos that are not on my computer 
	* if we don't have a remote then we can add by,
		*  git remote add origin <url of repo>
3. git status
	* status of files 
	* Tracked file means already added to github.
	* Untracked meaning just created but not added.
4. git add <file name>
	* adds file name for commiting
	* To add multiple files we use  
		* git add . (git add period)  
5. git commit -m “descriptive message”
	* to commit changes	to git
6. git push origin master
	* to get github repo upto date
	* push the master branch to the origin remote
	* remote refers to  our github repo

Syncing my Github Fork

	* Fork will not sync automatically i.e, if i've forked yesterday from sai
	   and today he's changed something then my repo will not be updated 
	   automatically.


                                                  	              









	* Solution is “fetch” changes from sai's repo(upstream) and “merge” them on my machine
	   and then push to my github repo. 
	* fetch and merge are combined into a single “pull” command.
	* we need an upstream remote that points to original repo of sai.
	* copy the url of sai's repo using




7. git remote add  upstream <url>
	* Now check to see if it worked using 
		*  git reomte -v
	* It is ready to be fetched
8. git fetch upstream
	* fetch the changes and stores in branch called upstream/master 
	* so we merge the changes
9. git merge upstream/master
	*  Now my local repo is upto date
	* To add these changes to github repo 
		* git push origin master    
	*  master is my local machine repo
	* origin is my github repo
	* upstream is sai's repo

Problems in Pushing to Github repo

	* create a repo in github and initialize with a readme file
	* create a repo in local machine(name need not be same as that of github repo)
	* create a directory and make that a repo
10.  git init
	* should be executed when present in the required directory
	* this initializes an empty git repository
	* Now we need to add a remote that allows us to access github repo easily
		* git remote add origin <url>
	* Add the files to local repo and check to confirm if git has detected untracked file
		* git status
		* git add .
	* commit them 
		* git commit -m “message”
	* push them to my github repo stored in the remote  origin
		* git push origin master
	* This flashes error saying updates are rejected because remote contains work
	   that you don't have locally
	* cause of error is that i've initialized the github repo with a readme file
	  which added and commited to github repo which is not a file my local repo 
	  knows about. 
	* so the git is confused about why the local repo doesnot have a readme file.
Solution

	* update the local repo using
11. git pull origin master
	* This fetches the readme file my github and merges with local repo
	* Now we can try 
		* git push origin master;  which works fine	







2 ways to avoid this hiccup
	
	(a) Don't initialize the repo with readme file 
	(b) cloning approach 
		* github doesnot allow to clone an empty repo
		* create a gihub repo with a readme file then
		* clone this repo to my local machine
			* git clone <url>
		* this sets the remotes as well 
		* now we can  do 
			* gid add . 
			* git commit -m “message” 			
			* git push origin master

Configuration

12. git config --global user.name “<user name>”
13. git config --global user.email “<email address>”

Changes

14. git diff
	* shows file differences not yet staged
	* to know exactly what i've changed rather file names
15. git diff --staged  
	* what i've staged that goes to my next commit
16. git rm <filename>
	* removes the file completely, not just untracking.
17. git mv <file_from> <file_to>
	* moving files

